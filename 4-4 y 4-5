#include<stdlib.h>
#include<stdio.h>
#include<ctype.h>
#include<math.h>
#include <string.h>

#define MAXOP 100
#define NUMBER       0
#define IDENTIFIER   1
#define MAXVAL 100
#define BUFSIZE 100


int Getop(char s[]);
void push(double val);
double pop(void);
void most(void);
void dup(void);
void swapI(void);
void lmp();
void func(char s[]);

int main(void)
{
   int type;
   double op2;
   char s[MAXOP];


   while((type = Getop(s)) != EOF)
   {
      switch(type)
      {
      case NUMBER:
         push(atof(s));
         break;
      case IDENTIFIER:
         func(s);
         break;
      case '+':
         push(pop() + pop());
         break;
      case '*':
         push(pop() * pop());
         break;
      case '-':
         op2 = pop();
         push(pop()- op2);
         break;
      case '/':
         op2 = pop();
         if(op2)
            push(pop() / op2);
         else
            printf("\n estas dividiendo entre 0!");
         break;
      case '%':
         op2 = pop();
         if(op2)
            push(fmod(pop(), op2));
         else
            printf("\nestas dividiendo entre 0!");
         break;
      case '?':
         most();
         break;
      case '#':
         dup();
         break;
      case '~':
         swapI();
         break;
      case '!':
         lmp();
      case '\n':
         printf("\n\t%.8g\n", pop());
         break;
      default:
         printf("\n comando no declarado %s.\n", s);
         break;
      }
   }
   return 0;
}



int sp = 0;
double val[MAXVAL];

void push(double f)
{
   if(sp < MAXVAL)
      val[sp++] = f;
   else
      printf("\n pila completa %g\n", f);
}


double pop(void)
{
   if(sp > 0)
      return val[--sp];
   else
   {
      printf("\n pila vacia\n");
      return 0.0;
   }
}

void most(void)
{
   if(sp > 0)
      printf("la parte de arriba tiene: %8g\n", val[sp-1]);
   else
      printf("esta vacia!\n");
}


void dup(void)
{
   double temp = pop();

   push(temp);
   push(temp);
}

void swapI(void)
{
   double item1 = pop();
   double item2 = pop();

   push(item1);
   push(item2);
}

void lmp(void)
{
   sp = 0;
}


void func(char s[])
{
   double op2;

   if( 0 == strcmp(s, "sin"))
      push(sin(pop()));
   else if (0 == strcmp(s, "exp"))
      push(exp(pop()));
   else if(!strcmp(s, "pow"))
   {
      op2 = pop();
      push(pow(pop(), op2));
   }
   else
      printf("%s no es una funcion declarada.\n", s);
}

int getch(void);
void unGetch(int);


int Getop(char s[])
{
   int i = 0;
   int c;
   int next;



   while((s[0] = c = getch()) == ' ' || c == '\t')
      ;
   s[1] = '\0';

   if(isalpha(c))
   {
      i = 0;
      while(isalpha(s[i++] = c ))
         c = getch();
      s[i - 1] = '\0';
      if(c != EOF)
         unGetch(c);
      return IDENTIFIER;
   }


   if(!isdigit(c) && c != '.' && c != '-')
      return c;

   if(c == '-')
   {
      next = getch();
      if(!isdigit(next) && next != '.')
      {
         return c;
      }
      c = next;
   }
   else
      c = getch();

   while(isdigit(s[++i] = c))
      c = getch();
   if(c == '.')
      while(isdigit(s[++i] = c = getch()))
         ;
      s[i] = '\0';
      if(c != EOF)
         unGetch(c);
      return NUMBER;
}



char buf[BUFSIZE];
int bufp = 0;

int getch(void)
{
   return (bufp > 0) ? buf[--bufp]: getchar();
}


void unGetch(int c)
{
   if(bufp >= BUFSIZE)
      printf("\n es muy grande\n");
   else
      buf[bufp++] = c;
}
