#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<ctype.h>

#define MAXOP 1000
#define NUMBER '0'
#define MAXVAL 1000
#define BUFSIZE 100

int getop(char []);
void push(double);
double pop();

int main(){
	int type;
	double op2;
	char s[MAXOP];

	while((type = getop(s)) != EOF){
		switch(type){
		case NUMBER:
			push(atof(s));
			break;
		case '+':
			push(pop()+pop());
			break;
		case '*':
			push(pop()*pop());
			break;
		case '-':
			op2 = pop();
			push(pop()-op2);
			break;
		case '/':
			op2 = pop();
			if(op2 != 0.0)
				push(pop()/op2);
			else
				printf("dividiendo entre 0\n");
			break;
		case '%':
			op2 = pop();
			if(op2 != 0.0)
				push(fmod(pop(),op2));
			else
				printf("dividiendo entre 0\n");
			break;
		case '\n':
			printf("  %.7g\n",pop());
			break;
		default:
			printf("error %s\n",s);
			break;
		}
	}
	return 0;
}

int sp = 0;
double val[MAXVAL];

void push(double f)
{
	if(sp < MAXVAL)
		val[sp++]=f;
	else
		printf("pila completa %g\n",f);
}


double pop(){
	if(sp>0)
		return val[--sp];
	else{
		printf("pila vacia\n");
		return 0.0;
	}
}

int getch();
void ungetch(int);

int getop(char s[]){
	int i, c;

	while((s[0] = c = getch()) == ' ' || c =='\t');
	s[1] = '\0';

	i = 0;
	if(!isdigit(c) && c!='.' && c!='-')
		return c;

	if(c=='-')
		if(isdigit(c=getch()) || c == '.')
			s[++i]=c;
		else{
			if(c!=EOF)
				ungetch(c);
			return '-';
		}

		if(isdigit(c))
			while(isdigit(s[++i] = c=getch()));

		if(c=='.')
			while(isdigit(s[++i] = c=getch()));

		s[i] = '\0';
		if(c!=EOF)
			ungetch(c);
		return NUMBER;
}

char buf[BUFSIZE];
int bufp = 0;

int getch(){
	return (bufp > 0) ? buf[--bufp] : getchar();
}

void ungetch(int c){
	if(bufp >= BUFSIZE)
		printf("Demasiados caracteres\n");
	else
		buf[bufp++] = c;
}
